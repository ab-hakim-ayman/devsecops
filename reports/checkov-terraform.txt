
       _               _
   ___| |__   ___  ___| | _______   __
  / __| '_ \ / _ \/ __| |/ / _ \ \ / /
 | (__| | | |  __/ (__|   < (_) \ V /
  \___|_| |_|\___|\___|_|\_\___/ \_/

By Prisma Cloud | version: 3.2.470 

terraform scan results:

Passed checks: 4, Failed checks: 10, Skipped checks: 0

Check: CKV_AWS_41: "Ensure no hard coded AWS access key and secret key exists in provider"
	PASSED for resource: aws.default
	File: /main.tf:1-3
Check: CKV_AWS_277: "Ensure no security groups allow ingress from 0.0.0.0:0 to port -1"
	PASSED for resource: aws_security_group.app_sg
	File: /main.tf:26-51
Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	PASSED for resource: aws_security_group.app_sg
	File: /main.tf:26-51
Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	PASSED for resource: aws_security_group.app_sg
	File: /main.tf:26-51
Check: CKV_TF_1: "Ensure Terraform module sources use a commit hash"
	FAILED for resource: eks
	File: /main.tf:54-70

		54 | module "eks" {
		55 |   source          = "terraform-aws-modules/eks/aws"
		56 |   cluster_name    = "dev-sec-ops-cluster"
		57 |   cluster_version = "1.27"
		58 |   subnets         = aws_subnet.public[*].id
		59 |   vpc_id          = aws_vpc.main.id
		60 | 
		61 |   node_groups = {
		62 |     devsecops_nodes = {
		63 |       desired_capacity = 2
		64 |       max_capacity     = 3
		65 |       min_capacity     = 1
		66 | 
		67 |       instance_type = "t3.medium"
		68 |     }
		69 |   }
		70 | }

Check: CKV_TF_2: "Ensure Terraform module sources use a tag with a version number"
	FAILED for resource: eks
	File: /main.tf:54-70

		54 | module "eks" {
		55 |   source          = "terraform-aws-modules/eks/aws"
		56 |   cluster_name    = "dev-sec-ops-cluster"
		57 |   cluster_version = "1.27"
		58 |   subnets         = aws_subnet.public[*].id
		59 |   vpc_id          = aws_vpc.main.id
		60 | 
		61 |   node_groups = {
		62 |     devsecops_nodes = {
		63 |       desired_capacity = 2
		64 |       max_capacity     = 3
		65 |       min_capacity     = 1
		66 | 
		67 |       instance_type = "t3.medium"
		68 |     }
		69 |   }
		70 | }

Check: CKV_AWS_130: "Ensure VPC subnets do not assign public IP by default"
	FAILED for resource: aws_subnet.public[0]
	File: /main.tf:14-23

		14 | resource "aws_subnet" "public" {
		15 |   count                   = length(var.public_subnet_cidrs)
		16 |   vpc_id                  = aws_vpc.main.id
		17 |   cidr_block              = var.public_subnet_cidrs[count.index]
		18 |   map_public_ip_on_launch = true
		19 |   availability_zone       = element(var.azs, count.index)
		20 |   tags = {
		21 |     Name = "public-${count.index}"
		22 |   }
		23 | }

Check: CKV_AWS_23: "Ensure every security group and rule has a description"
	FAILED for resource: aws_security_group.app_sg
	File: /main.tf:26-51

		26 | resource "aws_security_group" "app_sg" {
		27 |   name        = "dev-sec-ops-sg"
		28 |   description = "Allow HTTP/HTTPS"
		29 |   vpc_id      = aws_vpc.main.id
		30 | 
		31 |   ingress {
		32 |     from_port   = 80
		33 |     to_port     = 80
		34 |     protocol    = "tcp"
		35 |     cidr_blocks = ["0.0.0.0/0"]
		36 |   }
		37 | 
		38 |   ingress {
		39 |     from_port   = 443
		40 |     to_port     = 443
		41 |     protocol    = "tcp"
		42 |     cidr_blocks = ["0.0.0.0/0"]
		43 |   }
		44 | 
		45 |   egress {
		46 |     from_port   = 0
		47 |     to_port     = 0
		48 |     protocol    = "-1"
		49 |     cidr_blocks = ["0.0.0.0/0"]
		50 |   }
		51 | }

Check: CKV_AWS_260: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"
	FAILED for resource: aws_security_group.app_sg
	File: /main.tf:26-51

		26 | resource "aws_security_group" "app_sg" {
		27 |   name        = "dev-sec-ops-sg"
		28 |   description = "Allow HTTP/HTTPS"
		29 |   vpc_id      = aws_vpc.main.id
		30 | 
		31 |   ingress {
		32 |     from_port   = 80
		33 |     to_port     = 80
		34 |     protocol    = "tcp"
		35 |     cidr_blocks = ["0.0.0.0/0"]
		36 |   }
		37 | 
		38 |   ingress {
		39 |     from_port   = 443
		40 |     to_port     = 443
		41 |     protocol    = "tcp"
		42 |     cidr_blocks = ["0.0.0.0/0"]
		43 |   }
		44 | 
		45 |   egress {
		46 |     from_port   = 0
		47 |     to_port     = 0
		48 |     protocol    = "-1"
		49 |     cidr_blocks = ["0.0.0.0/0"]
		50 |   }
		51 | }

Check: CKV_AWS_382: "Ensure no security groups allow egress from 0.0.0.0:0 to port -1"
	FAILED for resource: aws_security_group.app_sg
	File: /main.tf:26-51

		26 | resource "aws_security_group" "app_sg" {
		27 |   name        = "dev-sec-ops-sg"
		28 |   description = "Allow HTTP/HTTPS"
		29 |   vpc_id      = aws_vpc.main.id
		30 | 
		31 |   ingress {
		32 |     from_port   = 80
		33 |     to_port     = 80
		34 |     protocol    = "tcp"
		35 |     cidr_blocks = ["0.0.0.0/0"]
		36 |   }
		37 | 
		38 |   ingress {
		39 |     from_port   = 443
		40 |     to_port     = 443
		41 |     protocol    = "tcp"
		42 |     cidr_blocks = ["0.0.0.0/0"]
		43 |   }
		44 | 
		45 |   egress {
		46 |     from_port   = 0
		47 |     to_port     = 0
		48 |     protocol    = "-1"
		49 |     cidr_blocks = ["0.0.0.0/0"]
		50 |   }
		51 | }

Check: CKV_AWS_130: "Ensure VPC subnets do not assign public IP by default"
	FAILED for resource: aws_subnet.public[1]
	File: /main.tf:14-23

		14 | resource "aws_subnet" "public" {
		15 |   count                   = length(var.public_subnet_cidrs)
		16 |   vpc_id                  = aws_vpc.main.id
		17 |   cidr_block              = var.public_subnet_cidrs[count.index]
		18 |   map_public_ip_on_launch = true
		19 |   availability_zone       = element(var.azs, count.index)
		20 |   tags = {
		21 |     Name = "public-${count.index}"
		22 |   }
		23 | }

Check: CKV2_AWS_12: "Ensure the default security group of every VPC restricts all traffic"
	FAILED for resource: aws_vpc.main
	File: /main.tf:6-11

		6  | resource "aws_vpc" "main" {
		7  |   cidr_block = var.vpc_cidr
		8  |   tags = {
		9  |     Name = "dev-sec-ops-vpc"
		10 |   }
		11 | }

Check: CKV2_AWS_11: "Ensure VPC flow logging is enabled in all VPCs"
	FAILED for resource: aws_vpc.main
	File: /main.tf:6-11

		6  | resource "aws_vpc" "main" {
		7  |   cidr_block = var.vpc_cidr
		8  |   tags = {
		9  |     Name = "dev-sec-ops-vpc"
		10 |   }
		11 | }

Check: CKV2_AWS_5: "Ensure that Security Groups are attached to another resource"
	FAILED for resource: aws_security_group.app_sg
	File: /main.tf:26-51

		26 | resource "aws_security_group" "app_sg" {
		27 |   name        = "dev-sec-ops-sg"
		28 |   description = "Allow HTTP/HTTPS"
		29 |   vpc_id      = aws_vpc.main.id
		30 | 
		31 |   ingress {
		32 |     from_port   = 80
		33 |     to_port     = 80
		34 |     protocol    = "tcp"
		35 |     cidr_blocks = ["0.0.0.0/0"]
		36 |   }
		37 | 
		38 |   ingress {
		39 |     from_port   = 443
		40 |     to_port     = 443
		41 |     protocol    = "tcp"
		42 |     cidr_blocks = ["0.0.0.0/0"]
		43 |   }
		44 | 
		45 |   egress {
		46 |     from_port   = 0
		47 |     to_port     = 0
		48 |     protocol    = "-1"
		49 |     cidr_blocks = ["0.0.0.0/0"]
		50 |   }
		51 | }


